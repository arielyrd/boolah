import { createServerClient, type CookieOptions } from "@supabase/ssr";
import { NextResponse, type NextRequest } from "next/server";

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  });

  const supabase = createServerClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, {
    cookies: {
      get(name: string) {
        return request.cookies.get(name)?.value;
      },
      set(name: string, value: string, options: CookieOptions) {
        request.cookies.set({
          name,
          value,
          ...options,
        });
        response = NextResponse.next({
          request: {
            headers: request.headers,
          },
        });
        response.cookies.set({
          name,
          value,
          ...options,
        });
      },
      remove(name: string, options: CookieOptions) {
        request.cookies.set({
          name,
          value: "",
          ...options,
        });
        response = NextResponse.next({
          request: {
            headers: request.headers,
          },
        });
        response.cookies.set({
          name,
          value: "",
          ...options,
        });
      },
    },
  });

  const {
    data: { user },
  } = await supabase.auth.getUser();

  // Jika belum login dan akses halaman protected, redirect ke /login
  if (!user && (request.nextUrl.pathname.startsWith("/admin") || request.nextUrl.pathname.startsWith("/bookings"))) {
    return NextResponse.redirect(new URL("/login", request.url));
  }

  // Jika sudah login dan akses /admin, cek role admin
  if (user && request.nextUrl.pathname.startsWith("/admin")) {
    // Ambil role user dari tabel public.users
    const { data, error } = await supabase.from("users").select("role").eq("id", user.id).single();

    // Jika gagal ambil data atau bukan admin, redirect ke /
    if (error || !data || data.role !== "admin") {
      return NextResponse.redirect(new URL("/", request.url));
    }
  }

  // Jika sudah login dan akses /login atau /register, redirect ke /
  if (user && (request.nextUrl.pathname.startsWith("/login") || request.nextUrl.pathname.startsWith("/register"))) {
    return NextResponse.redirect(new URL("/", request.url));
  }

  return response;
}
